//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class EditorRendererObject : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EditorRendererObject(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EditorRendererObject obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~EditorRendererObject() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          EditorRendererPINVOKE.delete_EditorRendererObject(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public void SetWorldPosition(float x, float y, float z) {
    EditorRendererPINVOKE.EditorRendererObject_SetWorldPosition(swigCPtr, x, y, z);
  }

  public float GetWorldPositionX() {
    float ret = EditorRendererPINVOKE.EditorRendererObject_GetWorldPositionX(swigCPtr);
    return ret;
  }

  public float GetWorldPositionY() {
    float ret = EditorRendererPINVOKE.EditorRendererObject_GetWorldPositionY(swigCPtr);
    return ret;
  }

  public float GetWorldPositionZ() {
    float ret = EditorRendererPINVOKE.EditorRendererObject_GetWorldPositionZ(swigCPtr);
    return ret;
  }

  public void SetRelativePosition(float x, float y, float z) {
    EditorRendererPINVOKE.EditorRendererObject_SetRelativePosition(swigCPtr, x, y, z);
  }

  public float GetRelativePositionX() {
    float ret = EditorRendererPINVOKE.EditorRendererObject_GetRelativePositionX(swigCPtr);
    return ret;
  }

  public float GetRelativePositionY() {
    float ret = EditorRendererPINVOKE.EditorRendererObject_GetRelativePositionY(swigCPtr);
    return ret;
  }

  public float GetRelativePositionZ() {
    float ret = EditorRendererPINVOKE.EditorRendererObject_GetRelativePositionZ(swigCPtr);
    return ret;
  }

  public void SetWorldRotation(float yaw, float pitch, float roll) {
    EditorRendererPINVOKE.EditorRendererObject_SetWorldRotation(swigCPtr, yaw, pitch, roll);
  }

  public float GetWorldRotationYaw() {
    float ret = EditorRendererPINVOKE.EditorRendererObject_GetWorldRotationYaw(swigCPtr);
    return ret;
  }

  public float GetWorldRotationPitch() {
    float ret = EditorRendererPINVOKE.EditorRendererObject_GetWorldRotationPitch(swigCPtr);
    return ret;
  }

  public float GetWorldRotationRoll() {
    float ret = EditorRendererPINVOKE.EditorRendererObject_GetWorldRotationRoll(swigCPtr);
    return ret;
  }

  public void SetRelativeRotation(float yaw, float pitch, float roll) {
    EditorRendererPINVOKE.EditorRendererObject_SetRelativeRotation(swigCPtr, yaw, pitch, roll);
  }

  public float GetRelativeRotationYaw() {
    float ret = EditorRendererPINVOKE.EditorRendererObject_GetRelativeRotationYaw(swigCPtr);
    return ret;
  }

  public float GetRelativeRotationPitch() {
    float ret = EditorRendererPINVOKE.EditorRendererObject_GetRelativeRotationPitch(swigCPtr);
    return ret;
  }

  public float GetRelativeRotationRoll() {
    float ret = EditorRendererPINVOKE.EditorRendererObject_GetRelativeRotationRoll(swigCPtr);
    return ret;
  }

  public EditorWorld GetWorld() {
    EditorWorld ret = new EditorWorld(EditorRendererPINVOKE.EditorRendererObject_GetWorld(swigCPtr), false);
    return ret;
  }

  public void SetWorld(EditorWorld inWorld) {
    EditorRendererPINVOKE.EditorRendererObject_SetWorld(swigCPtr, EditorWorld.getCPtr(inWorld));
    if (EditorRendererPINVOKE.SWIGPendingException.Pending) throw EditorRendererPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetParent(EditorRendererObject inParent) {
    EditorRendererPINVOKE.EditorRendererObject_SetParent(swigCPtr, EditorRendererObject.getCPtr(inParent));
    if (EditorRendererPINVOKE.SWIGPendingException.Pending) throw EditorRendererPINVOKE.SWIGPendingException.Retrieve();
  }

  public EditorRendererObject GetParent() {
    EditorRendererObject ret = new EditorRendererObject(EditorRendererPINVOKE.EditorRendererObject_GetParent(swigCPtr), false);
    return ret;
  }

  public virtual float GetBoundingRadius() {
    float ret = EditorRendererPINVOKE.EditorRendererObject_GetBoundingRadius(swigCPtr);
    return ret;
  }

  public virtual void Destroy() {
    EditorRendererPINVOKE.EditorRendererObject_Destroy(swigCPtr);
  }

  public EditorRendererObject() : this(EditorRendererPINVOKE.new_EditorRendererObject(), true) {
  }

}
