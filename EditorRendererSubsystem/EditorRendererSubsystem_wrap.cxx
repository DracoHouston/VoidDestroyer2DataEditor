/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_EditorRenderer(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_EditorRenderer(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_EditorRenderer(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include <string>


#include "EditorRendererSubsystem.h"
#include "EditorViewport.h"
#include "EditorWorld.h"
#include "EditorRendererObject.h"
#include "EditorActor.h"
#include "EditorActorComponent.h"
#include "RotateBoneAnimationComponent.h"
#include "PUSystemComponent.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_EditorRendererSubsystem_Init(void * jarg1, char * jarg2) {
  EditorRendererSubsystem *arg1 = (EditorRendererSubsystem *) 0 ;
  std::string arg2 ;
  
  arg1 = (EditorRendererSubsystem *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->Init(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorRendererSubsystem_Shutdown(void * jarg1) {
  EditorRendererSubsystem *arg1 = (EditorRendererSubsystem *) 0 ;
  
  arg1 = (EditorRendererSubsystem *)jarg1; 
  (arg1)->Shutdown();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorRendererSubsystem_CreateEditorViewport(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  EditorRendererSubsystem *arg1 = (EditorRendererSubsystem *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  EditorViewport *result = 0 ;
  
  arg1 = (EditorRendererSubsystem *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (EditorViewport *) &(arg1)->CreateEditorViewport(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EditorRendererSubsystem_IsActive(void * jarg1) {
  unsigned int jresult ;
  EditorRendererSubsystem *arg1 = (EditorRendererSubsystem *) 0 ;
  bool result;
  
  arg1 = (EditorRendererSubsystem *)jarg1; 
  result = (bool)(arg1)->IsActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EditorRendererSubsystem_Render(void * jarg1) {
  unsigned int jresult ;
  EditorRendererSubsystem *arg1 = (EditorRendererSubsystem *) 0 ;
  bool result;
  
  arg1 = (EditorRendererSubsystem *)jarg1; 
  result = (bool)(arg1)->Render();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EditorRendererSubsystem_GetPUTemplatesCount(void * jarg1) {
  int jresult ;
  EditorRendererSubsystem *arg1 = (EditorRendererSubsystem *) 0 ;
  int result;
  
  arg1 = (EditorRendererSubsystem *)jarg1; 
  result = (int)(arg1)->GetPUTemplatesCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EditorRendererSubsystem_GetPUTemplatesAtIndex(void * jarg1, int jarg2) {
  char * jresult ;
  EditorRendererSubsystem *arg1 = (EditorRendererSubsystem *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (EditorRendererSubsystem *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetPUTemplatesAtIndex(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EditorRendererSubsystem() {
  void * jresult ;
  EditorRendererSubsystem *result = 0 ;
  
  result = (EditorRendererSubsystem *)new EditorRendererSubsystem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EditorRendererSubsystem(void * jarg1) {
  EditorRendererSubsystem *arg1 = (EditorRendererSubsystem *) 0 ;
  
  arg1 = (EditorRendererSubsystem *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EditorViewport_Create(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  EditorViewport *arg1 = (EditorViewport *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool result;
  
  arg1 = (EditorViewport *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (bool)(arg1)->Create(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorViewport_Destroy(void * jarg1) {
  EditorViewport *arg1 = (EditorViewport *) 0 ;
  
  arg1 = (EditorViewport *)jarg1; 
  (arg1)->Destroy();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorViewport_SetWorld(void * jarg1, void * jarg2) {
  EditorViewport *arg1 = (EditorViewport *) 0 ;
  EditorWorld *arg2 = 0 ;
  
  arg1 = (EditorViewport *)jarg1; 
  arg2 = (EditorWorld *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EditorWorld & type is null", 0);
    return ;
  } 
  (arg1)->SetWorld(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorViewport_WindowMovedOrResized(void * jarg1) {
  EditorViewport *arg1 = (EditorViewport *) 0 ;
  
  arg1 = (EditorViewport *)jarg1; 
  (arg1)->WindowMovedOrResized();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorViewport_GetWorld(void * jarg1) {
  void * jresult ;
  EditorViewport *arg1 = (EditorViewport *) 0 ;
  EditorWorld *result = 0 ;
  
  arg1 = (EditorViewport *)jarg1; 
  result = (EditorWorld *) &(arg1)->GetWorld();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorViewport_CreateWorld(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  EditorViewport *arg1 = (EditorViewport *) 0 ;
  bool arg2 ;
  EditorWorld *result = 0 ;
  
  arg1 = (EditorViewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (EditorWorld *) &(arg1)->CreateWorld(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorViewport_SetCameraYawPitchDistance(void * jarg1, float jarg2, float jarg3, float jarg4) {
  EditorViewport *arg1 = (EditorViewport *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (EditorViewport *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetCameraYawPitchDistance(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorViewport_SetCameraDistance(void * jarg1, float jarg2) {
  EditorViewport *arg1 = (EditorViewport *) 0 ;
  float arg2 ;
  
  arg1 = (EditorViewport *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetCameraDistance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorViewport_SetCameraYaw(void * jarg1, float jarg2) {
  EditorViewport *arg1 = (EditorViewport *) 0 ;
  float arg2 ;
  
  arg1 = (EditorViewport *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetCameraYaw(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorViewport_SetCameraPitch(void * jarg1, float jarg2) {
  EditorViewport *arg1 = (EditorViewport *) 0 ;
  float arg2 ;
  
  arg1 = (EditorViewport *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetCameraPitch(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EditorViewport() {
  void * jresult ;
  EditorViewport *result = 0 ;
  
  result = (EditorViewport *)new EditorViewport();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EditorViewport(void * jarg1) {
  EditorViewport *arg1 = (EditorViewport *) 0 ;
  
  arg1 = (EditorViewport *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorWorld_CreateActor(void * jarg1, char * jarg2) {
  void * jresult ;
  EditorWorld *arg1 = (EditorWorld *) 0 ;
  std::string arg2 ;
  EditorActor *result = 0 ;
  
  arg1 = (EditorWorld *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (EditorActor *) &(arg1)->CreateActor(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorWorld_Init(void * jarg1) {
  EditorWorld *arg1 = (EditorWorld *) 0 ;
  
  arg1 = (EditorWorld *)jarg1; 
  (arg1)->Init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorWorld_Destroy(void * jarg1) {
  EditorWorld *arg1 = (EditorWorld *) 0 ;
  
  arg1 = (EditorWorld *)jarg1; 
  (arg1)->Destroy();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EditorWorld() {
  void * jresult ;
  EditorWorld *result = 0 ;
  
  result = (EditorWorld *)new EditorWorld();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EditorWorld(void * jarg1) {
  EditorWorld *arg1 = (EditorWorld *) 0 ;
  
  arg1 = (EditorWorld *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorRendererObject_SetWorldPosition(void * jarg1, float jarg2, float jarg3, float jarg4) {
  EditorRendererObject *arg1 = (EditorRendererObject *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (EditorRendererObject *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetWorldPosition(arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_EditorRendererObject_GetWorldPositionX(void * jarg1) {
  float jresult ;
  EditorRendererObject *arg1 = (EditorRendererObject *) 0 ;
  float result;
  
  arg1 = (EditorRendererObject *)jarg1; 
  result = (float)(arg1)->GetWorldPositionX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EditorRendererObject_GetWorldPositionY(void * jarg1) {
  float jresult ;
  EditorRendererObject *arg1 = (EditorRendererObject *) 0 ;
  float result;
  
  arg1 = (EditorRendererObject *)jarg1; 
  result = (float)(arg1)->GetWorldPositionY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EditorRendererObject_GetWorldPositionZ(void * jarg1) {
  float jresult ;
  EditorRendererObject *arg1 = (EditorRendererObject *) 0 ;
  float result;
  
  arg1 = (EditorRendererObject *)jarg1; 
  result = (float)(arg1)->GetWorldPositionZ();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorRendererObject_SetRelativePosition(void * jarg1, float jarg2, float jarg3, float jarg4) {
  EditorRendererObject *arg1 = (EditorRendererObject *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (EditorRendererObject *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetRelativePosition(arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_EditorRendererObject_GetRelativePositionX(void * jarg1) {
  float jresult ;
  EditorRendererObject *arg1 = (EditorRendererObject *) 0 ;
  float result;
  
  arg1 = (EditorRendererObject *)jarg1; 
  result = (float)(arg1)->GetRelativePositionX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EditorRendererObject_GetRelativePositionY(void * jarg1) {
  float jresult ;
  EditorRendererObject *arg1 = (EditorRendererObject *) 0 ;
  float result;
  
  arg1 = (EditorRendererObject *)jarg1; 
  result = (float)(arg1)->GetRelativePositionY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EditorRendererObject_GetRelativePositionZ(void * jarg1) {
  float jresult ;
  EditorRendererObject *arg1 = (EditorRendererObject *) 0 ;
  float result;
  
  arg1 = (EditorRendererObject *)jarg1; 
  result = (float)(arg1)->GetRelativePositionZ();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorRendererObject_SetWorldRotation(void * jarg1, float jarg2, float jarg3, float jarg4) {
  EditorRendererObject *arg1 = (EditorRendererObject *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (EditorRendererObject *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetWorldRotation(arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_EditorRendererObject_GetWorldRotationYaw(void * jarg1) {
  float jresult ;
  EditorRendererObject *arg1 = (EditorRendererObject *) 0 ;
  float result;
  
  arg1 = (EditorRendererObject *)jarg1; 
  result = (float)(arg1)->GetWorldRotationYaw();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EditorRendererObject_GetWorldRotationPitch(void * jarg1) {
  float jresult ;
  EditorRendererObject *arg1 = (EditorRendererObject *) 0 ;
  float result;
  
  arg1 = (EditorRendererObject *)jarg1; 
  result = (float)(arg1)->GetWorldRotationPitch();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EditorRendererObject_GetWorldRotationRoll(void * jarg1) {
  float jresult ;
  EditorRendererObject *arg1 = (EditorRendererObject *) 0 ;
  float result;
  
  arg1 = (EditorRendererObject *)jarg1; 
  result = (float)(arg1)->GetWorldRotationRoll();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorRendererObject_SetRelativeRotation(void * jarg1, float jarg2, float jarg3, float jarg4) {
  EditorRendererObject *arg1 = (EditorRendererObject *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (EditorRendererObject *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetRelativeRotation(arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_EditorRendererObject_GetRelativeRotationYaw(void * jarg1) {
  float jresult ;
  EditorRendererObject *arg1 = (EditorRendererObject *) 0 ;
  float result;
  
  arg1 = (EditorRendererObject *)jarg1; 
  result = (float)(arg1)->GetRelativeRotationYaw();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EditorRendererObject_GetRelativeRotationPitch(void * jarg1) {
  float jresult ;
  EditorRendererObject *arg1 = (EditorRendererObject *) 0 ;
  float result;
  
  arg1 = (EditorRendererObject *)jarg1; 
  result = (float)(arg1)->GetRelativeRotationPitch();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EditorRendererObject_GetRelativeRotationRoll(void * jarg1) {
  float jresult ;
  EditorRendererObject *arg1 = (EditorRendererObject *) 0 ;
  float result;
  
  arg1 = (EditorRendererObject *)jarg1; 
  result = (float)(arg1)->GetRelativeRotationRoll();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorRendererObject_GetWorld(void * jarg1) {
  void * jresult ;
  EditorRendererObject *arg1 = (EditorRendererObject *) 0 ;
  EditorWorld *result = 0 ;
  
  arg1 = (EditorRendererObject *)jarg1; 
  result = (EditorWorld *) &(arg1)->GetWorld();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorRendererObject_SetWorld(void * jarg1, void * jarg2) {
  EditorRendererObject *arg1 = (EditorRendererObject *) 0 ;
  EditorWorld *arg2 = 0 ;
  
  arg1 = (EditorRendererObject *)jarg1; 
  arg2 = (EditorWorld *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EditorWorld & type is null", 0);
    return ;
  } 
  (arg1)->SetWorld(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorRendererObject_SetParent(void * jarg1, void * jarg2) {
  EditorRendererObject *arg1 = (EditorRendererObject *) 0 ;
  EditorRendererObject *arg2 = 0 ;
  
  arg1 = (EditorRendererObject *)jarg1; 
  arg2 = (EditorRendererObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EditorRendererObject & type is null", 0);
    return ;
  } 
  (arg1)->SetParent(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorRendererObject_GetParent(void * jarg1) {
  void * jresult ;
  EditorRendererObject *arg1 = (EditorRendererObject *) 0 ;
  EditorRendererObject *result = 0 ;
  
  arg1 = (EditorRendererObject *)jarg1; 
  result = (EditorRendererObject *) &(arg1)->GetParent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EditorRendererObject_GetBoundingRadius(void * jarg1) {
  float jresult ;
  EditorRendererObject *arg1 = (EditorRendererObject *) 0 ;
  float result;
  
  arg1 = (EditorRendererObject *)jarg1; 
  result = (float)(arg1)->GetBoundingRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorRendererObject_Destroy(void * jarg1) {
  EditorRendererObject *arg1 = (EditorRendererObject *) 0 ;
  
  arg1 = (EditorRendererObject *)jarg1; 
  (arg1)->Destroy();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EditorRendererObject() {
  void * jresult ;
  EditorRendererObject *result = 0 ;
  
  result = (EditorRendererObject *)new EditorRendererObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EditorRendererObject(void * jarg1) {
  EditorRendererObject *arg1 = (EditorRendererObject *) 0 ;
  
  arg1 = (EditorRendererObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorActor_SetMesh(void * jarg1, char * jarg2) {
  EditorActor *arg1 = (EditorActor *) 0 ;
  std::string arg2 ;
  
  arg1 = (EditorActor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->SetMesh(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EditorActor_GetMeshName(void * jarg1) {
  char * jresult ;
  EditorActor *arg1 = (EditorActor *) 0 ;
  std::string result;
  
  arg1 = (EditorActor *)jarg1; 
  result = (arg1)->GetMeshName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EditorActor_GetBoundingRadius(void * jarg1) {
  float jresult ;
  EditorActor *arg1 = (EditorActor *) 0 ;
  float result;
  
  arg1 = (EditorActor *)jarg1; 
  result = (float)(arg1)->GetBoundingRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorActor_Destroy(void * jarg1) {
  EditorActor *arg1 = (EditorActor *) 0 ;
  
  arg1 = (EditorActor *)jarg1; 
  (arg1)->Destroy();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorActor_RegisterForUpdate(void * jarg1) {
  EditorActor *arg1 = (EditorActor *) 0 ;
  
  arg1 = (EditorActor *)jarg1; 
  (arg1)->RegisterForUpdate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorActor_Update(void * jarg1, float jarg2, float jarg3) {
  EditorActor *arg1 = (EditorActor *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (EditorActor *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->Update(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorActor_CreateChildActor(void * jarg1, char * jarg2) {
  void * jresult ;
  EditorActor *arg1 = (EditorActor *) 0 ;
  std::string arg2 ;
  EditorActor *result = 0 ;
  
  arg1 = (EditorActor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (EditorActor *) &(arg1)->CreateChildActor(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorActor_DestroyChildActor(void * jarg1, void * jarg2) {
  EditorActor *arg1 = (EditorActor *) 0 ;
  EditorActor *arg2 = 0 ;
  
  arg1 = (EditorActor *)jarg1; 
  arg2 = (EditorActor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EditorActor & type is null", 0);
    return ;
  } 
  (arg1)->DestroyChildActor(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorActor_DestroyChildActorByName(void * jarg1, char * jarg2) {
  EditorActor *arg1 = (EditorActor *) 0 ;
  std::string arg2 ;
  
  arg1 = (EditorActor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->DestroyChildActorByName(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorActor_RemoveChildActor(void * jarg1, void * jarg2) {
  EditorActor *arg1 = (EditorActor *) 0 ;
  EditorActor *arg2 = 0 ;
  
  arg1 = (EditorActor *)jarg1; 
  arg2 = (EditorActor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EditorActor & type is null", 0);
    return ;
  } 
  (arg1)->RemoveChildActor(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorActor_RemoveChildActorByName(void * jarg1, char * jarg2) {
  EditorActor *arg1 = (EditorActor *) 0 ;
  std::string arg2 ;
  
  arg1 = (EditorActor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->RemoveChildActorByName(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorActor_GetChildActorByName(void * jarg1, char * jarg2) {
  void * jresult ;
  EditorActor *arg1 = (EditorActor *) 0 ;
  std::string arg2 ;
  EditorActor *result = 0 ;
  
  arg1 = (EditorActor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (EditorActor *) &(arg1)->GetChildActorByName(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorActor_CreateRotateBoneAnimationComponent(void * jarg1, char * jarg2) {
  void * jresult ;
  EditorActor *arg1 = (EditorActor *) 0 ;
  std::string arg2 ;
  RotateBoneAnimationComponent *result = 0 ;
  
  arg1 = (EditorActor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (RotateBoneAnimationComponent *) &(arg1)->CreateRotateBoneAnimationComponent(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorActor_CreatePUSystemComponent(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
  void * jresult ;
  EditorActor *arg1 = (EditorActor *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool arg4 ;
  PUSystemComponent *result = 0 ;
  
  arg1 = (EditorActor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  arg4 = jarg4 ? true : false; 
  result = (PUSystemComponent *) &(arg1)->CreatePUSystemComponent(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorActor_GetComponent(void * jarg1, char * jarg2) {
  void * jresult ;
  EditorActor *arg1 = (EditorActor *) 0 ;
  std::string arg2 ;
  EditorActorComponent *result = 0 ;
  
  arg1 = (EditorActor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (EditorActorComponent *) &(arg1)->GetComponent(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorActor_RemoveComponent(void * jarg1, void * jarg2) {
  EditorActor *arg1 = (EditorActor *) 0 ;
  EditorActorComponent *arg2 = 0 ;
  
  arg1 = (EditorActor *)jarg1; 
  arg2 = (EditorActorComponent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EditorActorComponent & type is null", 0);
    return ;
  } 
  (arg1)->RemoveComponent(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorActor_DestroyComponent(void * jarg1, void * jarg2) {
  EditorActor *arg1 = (EditorActor *) 0 ;
  EditorActorComponent *arg2 = 0 ;
  
  arg1 = (EditorActor *)jarg1; 
  arg2 = (EditorActorComponent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EditorActorComponent & type is null", 0);
    return ;
  } 
  (arg1)->DestroyComponent(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorActor_RemoveComponentByName(void * jarg1, char * jarg2) {
  EditorActor *arg1 = (EditorActor *) 0 ;
  std::string arg2 ;
  
  arg1 = (EditorActor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->RemoveComponentByName(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorActor_DestroyComponentByName(void * jarg1, char * jarg2) {
  EditorActor *arg1 = (EditorActor *) 0 ;
  std::string arg2 ;
  
  arg1 = (EditorActor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->DestroyComponentByName(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EditorActor() {
  void * jresult ;
  EditorActor *result = 0 ;
  
  result = (EditorActor *)new EditorActor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EditorActor(void * jarg1) {
  EditorActor *arg1 = (EditorActor *) 0 ;
  
  arg1 = (EditorActor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorActorComponent_Update(void * jarg1, float jarg2, float jarg3) {
  EditorActorComponent *arg1 = (EditorActorComponent *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (EditorActorComponent *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->Update(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorActorComponent_Destroy(void * jarg1) {
  EditorActorComponent *arg1 = (EditorActorComponent *) 0 ;
  
  arg1 = (EditorActorComponent *)jarg1; 
  (arg1)->Destroy();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EditorActorComponent() {
  void * jresult ;
  EditorActorComponent *result = 0 ;
  
  result = (EditorActorComponent *)new EditorActorComponent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EditorActorComponent(void * jarg1) {
  EditorActorComponent *arg1 = (EditorActorComponent *) 0 ;
  
  arg1 = (EditorActorComponent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RotateBoneAnimationComponent_Update(void * jarg1, float jarg2, float jarg3) {
  RotateBoneAnimationComponent *arg1 = (RotateBoneAnimationComponent *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (RotateBoneAnimationComponent *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->Update(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RotateBoneAnimationComponent_Destroy(void * jarg1) {
  RotateBoneAnimationComponent *arg1 = (RotateBoneAnimationComponent *) 0 ;
  
  arg1 = (RotateBoneAnimationComponent *)jarg1; 
  (arg1)->Destroy();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RotateBoneAnimationComponent_StartAnimation(void * jarg1, char * jarg2, float jarg3, int jarg4) {
  RotateBoneAnimationComponent *arg1 = (RotateBoneAnimationComponent *) 0 ;
  std::string arg2 ;
  float arg3 ;
  RotateBoneAnimationAxis arg4 ;
  
  arg1 = (RotateBoneAnimationComponent *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (float)jarg3; 
  arg4 = (RotateBoneAnimationAxis)jarg4; 
  (arg1)->StartAnimation(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RotateBoneAnimationComponent_PauseAnimation(void * jarg1) {
  RotateBoneAnimationComponent *arg1 = (RotateBoneAnimationComponent *) 0 ;
  
  arg1 = (RotateBoneAnimationComponent *)jarg1; 
  (arg1)->PauseAnimation();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RotateBoneAnimationComponent_ResumeAnimation(void * jarg1) {
  RotateBoneAnimationComponent *arg1 = (RotateBoneAnimationComponent *) 0 ;
  
  arg1 = (RotateBoneAnimationComponent *)jarg1; 
  (arg1)->ResumeAnimation();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RotateBoneAnimationComponent_StopAnimation(void * jarg1) {
  RotateBoneAnimationComponent *arg1 = (RotateBoneAnimationComponent *) 0 ;
  
  arg1 = (RotateBoneAnimationComponent *)jarg1; 
  (arg1)->StopAnimation();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RotateBoneAnimationComponent() {
  void * jresult ;
  RotateBoneAnimationComponent *result = 0 ;
  
  result = (RotateBoneAnimationComponent *)new RotateBoneAnimationComponent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RotateBoneAnimationComponent(void * jarg1) {
  RotateBoneAnimationComponent *arg1 = (RotateBoneAnimationComponent *) 0 ;
  
  arg1 = (RotateBoneAnimationComponent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PUSystemComponent_Update(void * jarg1, float jarg2, float jarg3) {
  PUSystemComponent *arg1 = (PUSystemComponent *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (PUSystemComponent *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->Update(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PUSystemComponent_Destroy(void * jarg1) {
  PUSystemComponent *arg1 = (PUSystemComponent *) 0 ;
  
  arg1 = (PUSystemComponent *)jarg1; 
  (arg1)->Destroy();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PUSystemComponent_SetSystemByTemplate(void * jarg1, char * jarg2) {
  PUSystemComponent *arg1 = (PUSystemComponent *) 0 ;
  std::string arg2 ;
  
  arg1 = (PUSystemComponent *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->SetSystemByTemplate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PUSystemComponent_SetForcedLooping(void * jarg1, unsigned int jarg2) {
  PUSystemComponent *arg1 = (PUSystemComponent *) 0 ;
  bool arg2 ;
  
  arg1 = (PUSystemComponent *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetForcedLooping(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PUSystemComponent_PlaySystem(void * jarg1) {
  PUSystemComponent *arg1 = (PUSystemComponent *) 0 ;
  
  arg1 = (PUSystemComponent *)jarg1; 
  (arg1)->PlaySystem();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PUSystemComponent_StopSystem(void * jarg1) {
  PUSystemComponent *arg1 = (PUSystemComponent *) 0 ;
  
  arg1 = (PUSystemComponent *)jarg1; 
  (arg1)->StopSystem();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PUSystemComponent_SetName(void * jarg1, char * jarg2) {
  PUSystemComponent *arg1 = (PUSystemComponent *) 0 ;
  std::string arg2 ;
  
  arg1 = (PUSystemComponent *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->SetName(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PUSystemComponent() {
  void * jresult ;
  PUSystemComponent *result = 0 ;
  
  result = (PUSystemComponent *)new PUSystemComponent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PUSystemComponent(void * jarg1) {
  PUSystemComponent *arg1 = (PUSystemComponent *) 0 ;
  
  arg1 = (PUSystemComponent *)jarg1; 
  delete arg1;
}


SWIGEXPORT EditorRendererObject * SWIGSTDCALL CSharp_EditorActor_SWIGUpcast(EditorActor *jarg1) {
    return (EditorRendererObject *)jarg1;
}

SWIGEXPORT EditorRendererObject * SWIGSTDCALL CSharp_EditorActorComponent_SWIGUpcast(EditorActorComponent *jarg1) {
    return (EditorRendererObject *)jarg1;
}

SWIGEXPORT EditorActorComponent * SWIGSTDCALL CSharp_RotateBoneAnimationComponent_SWIGUpcast(RotateBoneAnimationComponent *jarg1) {
    return (EditorActorComponent *)jarg1;
}

SWIGEXPORT EditorActorComponent * SWIGSTDCALL CSharp_PUSystemComponent_SWIGUpcast(PUSystemComponent *jarg1) {
    return (EditorActorComponent *)jarg1;
}

#ifdef __cplusplus
}
#endif

