//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class EditorActor : EditorRendererObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal EditorActor(global::System.IntPtr cPtr, bool cMemoryOwn) : base(EditorRendererPINVOKE.EditorActor_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EditorActor obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          EditorRendererPINVOKE.delete_EditorActor(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public void SetMesh(string inMeshName) {
    EditorRendererPINVOKE.EditorActor_SetMesh(swigCPtr, inMeshName);
    if (EditorRendererPINVOKE.SWIGPendingException.Pending) throw EditorRendererPINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetMeshName() {
    string ret = EditorRendererPINVOKE.EditorActor_GetMeshName(swigCPtr);
    return ret;
  }

  public override float GetBoundingRadius() {
    float ret = EditorRendererPINVOKE.EditorActor_GetBoundingRadius(swigCPtr);
    return ret;
  }

  public override void Destroy() {
    EditorRendererPINVOKE.EditorActor_Destroy(swigCPtr);
  }

  public void RegisterForUpdate() {
    EditorRendererPINVOKE.EditorActor_RegisterForUpdate(swigCPtr);
  }

  public void Update(float DeltaTime, float TotalTime) {
    EditorRendererPINVOKE.EditorActor_Update(swigCPtr, DeltaTime, TotalTime);
  }

  public EditorActor CreateChildActor(string inName) {
    EditorActor ret = new EditorActor(EditorRendererPINVOKE.EditorActor_CreateChildActor(swigCPtr, inName), false);
    if (EditorRendererPINVOKE.SWIGPendingException.Pending) throw EditorRendererPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void DestroyChildActor(EditorActor inDestroyTarget) {
    EditorRendererPINVOKE.EditorActor_DestroyChildActor(swigCPtr, EditorActor.getCPtr(inDestroyTarget));
    if (EditorRendererPINVOKE.SWIGPendingException.Pending) throw EditorRendererPINVOKE.SWIGPendingException.Retrieve();
  }

  public void DestroyChildActorByName(string inName) {
    EditorRendererPINVOKE.EditorActor_DestroyChildActorByName(swigCPtr, inName);
    if (EditorRendererPINVOKE.SWIGPendingException.Pending) throw EditorRendererPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveChildActor(EditorActor inDestroyTarget) {
    EditorRendererPINVOKE.EditorActor_RemoveChildActor(swigCPtr, EditorActor.getCPtr(inDestroyTarget));
    if (EditorRendererPINVOKE.SWIGPendingException.Pending) throw EditorRendererPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveChildActorByName(string inName) {
    EditorRendererPINVOKE.EditorActor_RemoveChildActorByName(swigCPtr, inName);
    if (EditorRendererPINVOKE.SWIGPendingException.Pending) throw EditorRendererPINVOKE.SWIGPendingException.Retrieve();
  }

  public EditorActor GetChildActorByName(string inName) {
    EditorActor ret = new EditorActor(EditorRendererPINVOKE.EditorActor_GetChildActorByName(swigCPtr, inName), false);
    if (EditorRendererPINVOKE.SWIGPendingException.Pending) throw EditorRendererPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RotateBoneAnimationComponent CreateRotateBoneAnimationComponent(string inName) {
    RotateBoneAnimationComponent ret = new RotateBoneAnimationComponent(EditorRendererPINVOKE.EditorActor_CreateRotateBoneAnimationComponent(swigCPtr, inName), false);
    if (EditorRendererPINVOKE.SWIGPendingException.Pending) throw EditorRendererPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PUSystemComponent CreatePUSystemComponent(string inName, string inTemplate, bool inForcedLooping) {
    PUSystemComponent ret = new PUSystemComponent(EditorRendererPINVOKE.EditorActor_CreatePUSystemComponent(swigCPtr, inName, inTemplate, inForcedLooping), false);
    if (EditorRendererPINVOKE.SWIGPendingException.Pending) throw EditorRendererPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public EditorActorComponent GetComponent(string inName) {
    EditorActorComponent ret = new EditorActorComponent(EditorRendererPINVOKE.EditorActor_GetComponent(swigCPtr, inName), false);
    if (EditorRendererPINVOKE.SWIGPendingException.Pending) throw EditorRendererPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void RemoveComponent(EditorActorComponent inTarget) {
    EditorRendererPINVOKE.EditorActor_RemoveComponent(swigCPtr, EditorActorComponent.getCPtr(inTarget));
    if (EditorRendererPINVOKE.SWIGPendingException.Pending) throw EditorRendererPINVOKE.SWIGPendingException.Retrieve();
  }

  public void DestroyComponent(EditorActorComponent inTarget) {
    EditorRendererPINVOKE.EditorActor_DestroyComponent(swigCPtr, EditorActorComponent.getCPtr(inTarget));
    if (EditorRendererPINVOKE.SWIGPendingException.Pending) throw EditorRendererPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveComponentByName(string inName) {
    EditorRendererPINVOKE.EditorActor_RemoveComponentByName(swigCPtr, inName);
    if (EditorRendererPINVOKE.SWIGPendingException.Pending) throw EditorRendererPINVOKE.SWIGPendingException.Retrieve();
  }

  public void DestroyComponentByName(string inName) {
    EditorRendererPINVOKE.EditorActor_DestroyComponentByName(swigCPtr, inName);
    if (EditorRendererPINVOKE.SWIGPendingException.Pending) throw EditorRendererPINVOKE.SWIGPendingException.Retrieve();
  }

  public EditorActor() : this(EditorRendererPINVOKE.new_EditorActor(), true) {
  }

}
