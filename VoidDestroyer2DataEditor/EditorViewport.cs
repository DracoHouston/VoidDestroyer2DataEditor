//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class EditorViewport : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EditorViewport(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EditorViewport obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~EditorViewport() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          EditorRendererPINVOKE.delete_EditorViewport(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public bool Create(string inName, string inHandle) {
    bool ret = EditorRendererPINVOKE.EditorViewport_Create(swigCPtr, inName, inHandle);
    if (EditorRendererPINVOKE.SWIGPendingException.Pending) throw EditorRendererPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Destroy() {
    EditorRendererPINVOKE.EditorViewport_Destroy(swigCPtr);
  }

  public void SetWorld(EditorWorld inWorld) {
    EditorRendererPINVOKE.EditorViewport_SetWorld(swigCPtr, EditorWorld.getCPtr(inWorld));
    if (EditorRendererPINVOKE.SWIGPendingException.Pending) throw EditorRendererPINVOKE.SWIGPendingException.Retrieve();
  }

  public void WindowMovedOrResized() {
    EditorRendererPINVOKE.EditorViewport_WindowMovedOrResized(swigCPtr);
  }

  public EditorWorld GetWorld() {
    EditorWorld ret = new EditorWorld(EditorRendererPINVOKE.EditorViewport_GetWorld(swigCPtr), false);
    return ret;
  }

  public EditorWorld CreateWorld(bool inSetActive) {
    EditorWorld ret = new EditorWorld(EditorRendererPINVOKE.EditorViewport_CreateWorld(swigCPtr, inSetActive), false);
    return ret;
  }

  public void SetCameraYawPitchDistance(float inYaw, float inPitch, float inDistance) {
    EditorRendererPINVOKE.EditorViewport_SetCameraYawPitchDistance(swigCPtr, inYaw, inPitch, inDistance);
  }

  public void SetCameraDistance(float inDistance) {
    EditorRendererPINVOKE.EditorViewport_SetCameraDistance(swigCPtr, inDistance);
  }

  public void SetCameraYaw(float inYaw) {
    EditorRendererPINVOKE.EditorViewport_SetCameraYaw(swigCPtr, inYaw);
  }

  public void SetCameraPitch(float inPitch) {
    EditorRendererPINVOKE.EditorViewport_SetCameraPitch(swigCPtr, inPitch);
  }

  public EditorViewport() : this(EditorRendererPINVOKE.new_EditorViewport(), true) {
  }

}
